

justify-content: flex-end; will move the frog to the right.

#pond {
  display: flex;
  justify-content: flex-end;
}


# pushes straight down  to the bottom of the container.
#pond {
  display: flex;
  align-items: flex-end;
}

# center of container
#pond {
  display: flex;
  justify-content: center;
  align-items: center;
}

# bottom with space around
#pond {
  display: flex;
  justify-content: center;
  align-items: center;
}

# defines the direction items are placed in the container
#pond {
  display: flex;
  flex-direction: row-reverse;
}

#pond {
  display: flex;
  flex-direction: column;
}

# Notice that when you set the direction to a reversed row or column, start and end are also reversed.
#pond {
  display: flex;
  flex-direction: row-reverse;
  justify-content: flex-end;
}

# Notice that when the flex direction is a column, justify-content changes to the vertical and align-items to the horizontal.
#pond {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
}

# space between column, virtically reversed.
#pond {
  display: flex;
  flex-direction: column-reverse;
  justify-content: space-between;
}

# reverse row, centered on the bottom of the container.
#pond {
  display: flex;
  flex-direction: row-reverse;
  justify-content: center;
  align-items: flex-end;
}

# Sometimes reversing the row or column order of a container is not enough. In these cases, we can apply the order property to individual items. By default, items have a value of 0, but we can use this property to set it to a positive or negative integer value.

#pond {
  display: flex;
}

.yellow {
  order: 3;
}

# move frog to the left minus three.
#pond {
  display: flex;
}

.red {
  order: -3;
}

# Another property you can apply to individual items is align-self. This property accepts the same values as align-items and its value for the specific item.

#pond {
  display: flex;
  align-items: flex-start;
}

.yellow {
  align-self: flex-end;
}

# move two yellow from top row to bottom right.
#pond {
  display: flex;
  align-items: flex-start;
}

.yellow {
  align-self: flex-end;
  order: 1;
}

# wrap frogs to next row.
# The frogs are all squeezed onto a single row of lilypads. Spread them out using the flex-wrap property, which accepts the following values:

nowrap: Every item is fit to a single line.
wrap: Items wrap around to additional lines.
wrap-reverse: Items wrap around to additional lines in reverse.

#pond {
  display: flex;
  flex-wrap: wrap;
}

# wrap 15 frogs from top row to a 3 x 5 matrix
#pond {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
}

# The two properties flex-direction and flex-wrap are used so often together that the shorthand property flex-flow was created to combine them. This shorthand property accepts the value of one of the two properties separated by a space.

For example, you can use flex-flow: row wrap to set rows and wrap them.

#pond {
  display: flex;
  flex-flow: column wrap;
}

# The frogs are spread all over the pond, but the lilypads are bunched at the top. You can use align-content to set how multiple lines are spaced apart from each other. This property takes the following values:

flex-start: Lines are packed at the top of the container.
flex-end: Lines are packed at the bottom of the container.
center: Lines are packed at the vertical center of the container.
space-between: Lines display with equal spacing between them.
space-around: Lines display with equal spacing around them.
stretch: Lines are stretched to fit the container.
This can be confusing, but align-content determines the spacing between lines, while align-items determines how the items as a whole are aligned within the container. When there is only one line, align-content has no effect.

#pond {
  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;
}

# 3 x 5 matrix at the bottom of container.

#pond {
  display: flex;
  flex-wrap: wrap;
  align-content: flex-end;
}




